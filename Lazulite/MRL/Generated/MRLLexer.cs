//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/jewel/RiderProjects/Lazulite/Lazulite/MRL/Generated/MRLLexer.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class MRLLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ITYPE=1, COMPLETE=2, STATIC=3, ISTATIC=4, READONLY=5, CONSTANT=6, ICONSTANT=7, 
		DYNAMIC=8, REQUIRED=9, NULLABLE=10, SPECIFIC=11, INPLACE=12, ALIKE=13, 
		SAME=14, OPERATOR=15, NEW=16, WITH=17, OUT=18, PRESERVES=19, FROM=20, 
		TO=21, RETURN=22, IMPORT=23, ASSERT=24, IF=25, ELSE=26, NULL=27, LET=28, 
		GET=29, SET=30, AS=31, FOR=32, IN=33, WHILE=34, BREAK=35, CONTINUE=36, 
		WHERE=37, EACH=38, COLON=39, COMMA=40, DOT=41, SEMICOLON=42, ARROW=43, 
		FULLARROW=44, EQUAL=45, MODIFY=46, LBRACE=47, RBRACE=48, LPAREN=49, RPAREN=50, 
		LBRACK=51, RBRACK=52, PLUS=53, MINUS=54, STAR=55, SLASH=56, PERCENT=57, 
		CARET=58, BANG=59, TILDE=60, QUESTION=61, LESSTHAN=62, LESSEQUAL=63, GREATERTHAN=64, 
		GREATEREQUAL=65, EQUALEQUAL=66, NOTEQUAL=67, AND=68, OR=69, ANDAND=70, 
		OROR=71, IDENTIFIER=72, NUMBER=73, STRING=74, LINECOMMENT=75, BLOCKCOMMENT=76, 
		WS=77;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"ITYPE", "COMPLETE", "STATIC", "ISTATIC", "READONLY", "CONSTANT", "ICONSTANT", 
		"DYNAMIC", "REQUIRED", "NULLABLE", "SPECIFIC", "INPLACE", "ALIKE", "SAME", 
		"OPERATOR", "NEW", "WITH", "OUT", "PRESERVES", "FROM", "TO", "RETURN", 
		"IMPORT", "ASSERT", "IF", "ELSE", "NULL", "LET", "GET", "SET", "AS", "FOR", 
		"IN", "WHILE", "BREAK", "CONTINUE", "WHERE", "EACH", "COLON", "COMMA", 
		"DOT", "SEMICOLON", "ARROW", "FULLARROW", "EQUAL", "MODIFY", "LBRACE", 
		"RBRACE", "LPAREN", "RPAREN", "LBRACK", "RBRACK", "PLUS", "MINUS", "STAR", 
		"SLASH", "PERCENT", "CARET", "BANG", "TILDE", "QUESTION", "LESSTHAN", 
		"LESSEQUAL", "GREATERTHAN", "GREATEREQUAL", "EQUALEQUAL", "NOTEQUAL", 
		"AND", "OR", "ANDAND", "OROR", "IDENTIFIER", "NUMBER", "STRING", "LINECOMMENT", 
		"BLOCKCOMMENT", "WS"
	};


	public MRLLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MRLLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'itype'", "'complete'", "'static'", "'istatic'", "'readonly'", 
		"'constant'", "'iconstant'", "'dynamic'", "'required'", "'nullable'", 
		"'specific'", "'inplace'", "'alike'", "'same'", "'operator'", "'new'", 
		"'with'", "'out'", "'preserves'", "'from'", "'to'", "'return'", "'import'", 
		"'assert'", "'if'", "'else'", "'null'", "'let'", "'get'", "'set'", "'as'", 
		"'for'", "'in'", "'while'", "'break'", "'continue'", "'where'", "'each'", 
		"':'", "','", "'.'", "';'", "'->'", "'=>'", "'='", "':='", "'{'", "'}'", 
		"'('", "')'", "'['", "']'", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", 
		"'!'", "'~'", "'?'", "'<'", "'<='", "'>'", "'>='", "'=='", "'!='", "'&'", 
		"'|'", "'&&'", "'||'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ITYPE", "COMPLETE", "STATIC", "ISTATIC", "READONLY", "CONSTANT", 
		"ICONSTANT", "DYNAMIC", "REQUIRED", "NULLABLE", "SPECIFIC", "INPLACE", 
		"ALIKE", "SAME", "OPERATOR", "NEW", "WITH", "OUT", "PRESERVES", "FROM", 
		"TO", "RETURN", "IMPORT", "ASSERT", "IF", "ELSE", "NULL", "LET", "GET", 
		"SET", "AS", "FOR", "IN", "WHILE", "BREAK", "CONTINUE", "WHERE", "EACH", 
		"COLON", "COMMA", "DOT", "SEMICOLON", "ARROW", "FULLARROW", "EQUAL", "MODIFY", 
		"LBRACE", "RBRACE", "LPAREN", "RPAREN", "LBRACK", "RBRACK", "PLUS", "MINUS", 
		"STAR", "SLASH", "PERCENT", "CARET", "BANG", "TILDE", "QUESTION", "LESSTHAN", 
		"LESSEQUAL", "GREATERTHAN", "GREATEREQUAL", "EQUALEQUAL", "NOTEQUAL", 
		"AND", "OR", "ANDAND", "OROR", "IDENTIFIER", "NUMBER", "STRING", "LINECOMMENT", 
		"BLOCKCOMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MRLLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MRLLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,77,544,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
		7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
		7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,1,0,1,
		0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,
		1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,
		8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,
		1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,
		1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
		1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,
		1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,
		1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,
		1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,
		1,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,
		1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
		1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,38,1,38,
		1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,44,1,44,
		1,45,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,
		1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,
		1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,62,1,63,1,63,1,64,1,64,
		1,64,1,65,1,65,1,65,1,66,1,66,1,66,1,67,1,67,1,68,1,68,1,69,1,69,1,69,
		1,70,1,70,1,70,1,71,1,71,5,71,473,8,71,10,71,12,71,476,9,71,1,72,4,72,
		479,8,72,11,72,12,72,480,1,72,1,72,4,72,485,8,72,11,72,12,72,486,3,72,
		489,8,72,1,72,1,72,3,72,493,8,72,1,72,4,72,496,8,72,11,72,12,72,497,3,
		72,500,8,72,3,72,502,8,72,1,73,1,73,1,73,1,73,5,73,508,8,73,10,73,12,73,
		511,9,73,1,73,1,73,1,74,1,74,5,74,517,8,74,10,74,12,74,520,9,74,1,74,1,
		74,1,75,1,75,1,75,1,75,5,75,528,8,75,10,75,12,75,531,9,75,1,75,1,75,1,
		75,1,75,1,75,1,76,4,76,539,8,76,11,76,12,76,540,1,76,1,76,1,529,0,77,1,
		1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,
		15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,
		27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,
		39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,
		51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,
		61,123,62,125,63,127,64,129,65,131,66,133,67,135,68,137,69,139,70,141,
		71,143,72,145,73,147,74,149,75,151,76,153,77,1,0,8,3,0,65,90,95,95,97,
		122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,2,0,69,69,101,101,2,0,43,43,
		45,45,4,0,10,10,13,13,34,34,92,92,2,0,10,10,13,13,3,0,9,10,13,13,32,32,
		556,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
		0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
		0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
		1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
		0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,
		1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
		0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
		1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,
		0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,
		1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,
		1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,
		1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,
		1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,
		1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,0,149,
		1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,1,155,1,0,0,0,3,161,1,0,0,0,5,170,
		1,0,0,0,7,177,1,0,0,0,9,185,1,0,0,0,11,194,1,0,0,0,13,203,1,0,0,0,15,213,
		1,0,0,0,17,221,1,0,0,0,19,230,1,0,0,0,21,239,1,0,0,0,23,248,1,0,0,0,25,
		256,1,0,0,0,27,262,1,0,0,0,29,267,1,0,0,0,31,276,1,0,0,0,33,280,1,0,0,
		0,35,285,1,0,0,0,37,289,1,0,0,0,39,299,1,0,0,0,41,304,1,0,0,0,43,307,1,
		0,0,0,45,314,1,0,0,0,47,321,1,0,0,0,49,328,1,0,0,0,51,331,1,0,0,0,53,336,
		1,0,0,0,55,341,1,0,0,0,57,345,1,0,0,0,59,349,1,0,0,0,61,353,1,0,0,0,63,
		356,1,0,0,0,65,360,1,0,0,0,67,363,1,0,0,0,69,369,1,0,0,0,71,375,1,0,0,
		0,73,384,1,0,0,0,75,390,1,0,0,0,77,395,1,0,0,0,79,397,1,0,0,0,81,399,1,
		0,0,0,83,401,1,0,0,0,85,403,1,0,0,0,87,406,1,0,0,0,89,409,1,0,0,0,91,411,
		1,0,0,0,93,414,1,0,0,0,95,416,1,0,0,0,97,418,1,0,0,0,99,420,1,0,0,0,101,
		422,1,0,0,0,103,424,1,0,0,0,105,426,1,0,0,0,107,428,1,0,0,0,109,430,1,
		0,0,0,111,432,1,0,0,0,113,434,1,0,0,0,115,436,1,0,0,0,117,438,1,0,0,0,
		119,440,1,0,0,0,121,442,1,0,0,0,123,444,1,0,0,0,125,446,1,0,0,0,127,449,
		1,0,0,0,129,451,1,0,0,0,131,454,1,0,0,0,133,457,1,0,0,0,135,460,1,0,0,
		0,137,462,1,0,0,0,139,464,1,0,0,0,141,467,1,0,0,0,143,470,1,0,0,0,145,
		478,1,0,0,0,147,503,1,0,0,0,149,514,1,0,0,0,151,523,1,0,0,0,153,538,1,
		0,0,0,155,156,5,105,0,0,156,157,5,116,0,0,157,158,5,121,0,0,158,159,5,
		112,0,0,159,160,5,101,0,0,160,2,1,0,0,0,161,162,5,99,0,0,162,163,5,111,
		0,0,163,164,5,109,0,0,164,165,5,112,0,0,165,166,5,108,0,0,166,167,5,101,
		0,0,167,168,5,116,0,0,168,169,5,101,0,0,169,4,1,0,0,0,170,171,5,115,0,
		0,171,172,5,116,0,0,172,173,5,97,0,0,173,174,5,116,0,0,174,175,5,105,0,
		0,175,176,5,99,0,0,176,6,1,0,0,0,177,178,5,105,0,0,178,179,5,115,0,0,179,
		180,5,116,0,0,180,181,5,97,0,0,181,182,5,116,0,0,182,183,5,105,0,0,183,
		184,5,99,0,0,184,8,1,0,0,0,185,186,5,114,0,0,186,187,5,101,0,0,187,188,
		5,97,0,0,188,189,5,100,0,0,189,190,5,111,0,0,190,191,5,110,0,0,191,192,
		5,108,0,0,192,193,5,121,0,0,193,10,1,0,0,0,194,195,5,99,0,0,195,196,5,
		111,0,0,196,197,5,110,0,0,197,198,5,115,0,0,198,199,5,116,0,0,199,200,
		5,97,0,0,200,201,5,110,0,0,201,202,5,116,0,0,202,12,1,0,0,0,203,204,5,
		105,0,0,204,205,5,99,0,0,205,206,5,111,0,0,206,207,5,110,0,0,207,208,5,
		115,0,0,208,209,5,116,0,0,209,210,5,97,0,0,210,211,5,110,0,0,211,212,5,
		116,0,0,212,14,1,0,0,0,213,214,5,100,0,0,214,215,5,121,0,0,215,216,5,110,
		0,0,216,217,5,97,0,0,217,218,5,109,0,0,218,219,5,105,0,0,219,220,5,99,
		0,0,220,16,1,0,0,0,221,222,5,114,0,0,222,223,5,101,0,0,223,224,5,113,0,
		0,224,225,5,117,0,0,225,226,5,105,0,0,226,227,5,114,0,0,227,228,5,101,
		0,0,228,229,5,100,0,0,229,18,1,0,0,0,230,231,5,110,0,0,231,232,5,117,0,
		0,232,233,5,108,0,0,233,234,5,108,0,0,234,235,5,97,0,0,235,236,5,98,0,
		0,236,237,5,108,0,0,237,238,5,101,0,0,238,20,1,0,0,0,239,240,5,115,0,0,
		240,241,5,112,0,0,241,242,5,101,0,0,242,243,5,99,0,0,243,244,5,105,0,0,
		244,245,5,102,0,0,245,246,5,105,0,0,246,247,5,99,0,0,247,22,1,0,0,0,248,
		249,5,105,0,0,249,250,5,110,0,0,250,251,5,112,0,0,251,252,5,108,0,0,252,
		253,5,97,0,0,253,254,5,99,0,0,254,255,5,101,0,0,255,24,1,0,0,0,256,257,
		5,97,0,0,257,258,5,108,0,0,258,259,5,105,0,0,259,260,5,107,0,0,260,261,
		5,101,0,0,261,26,1,0,0,0,262,263,5,115,0,0,263,264,5,97,0,0,264,265,5,
		109,0,0,265,266,5,101,0,0,266,28,1,0,0,0,267,268,5,111,0,0,268,269,5,112,
		0,0,269,270,5,101,0,0,270,271,5,114,0,0,271,272,5,97,0,0,272,273,5,116,
		0,0,273,274,5,111,0,0,274,275,5,114,0,0,275,30,1,0,0,0,276,277,5,110,0,
		0,277,278,5,101,0,0,278,279,5,119,0,0,279,32,1,0,0,0,280,281,5,119,0,0,
		281,282,5,105,0,0,282,283,5,116,0,0,283,284,5,104,0,0,284,34,1,0,0,0,285,
		286,5,111,0,0,286,287,5,117,0,0,287,288,5,116,0,0,288,36,1,0,0,0,289,290,
		5,112,0,0,290,291,5,114,0,0,291,292,5,101,0,0,292,293,5,115,0,0,293,294,
		5,101,0,0,294,295,5,114,0,0,295,296,5,118,0,0,296,297,5,101,0,0,297,298,
		5,115,0,0,298,38,1,0,0,0,299,300,5,102,0,0,300,301,5,114,0,0,301,302,5,
		111,0,0,302,303,5,109,0,0,303,40,1,0,0,0,304,305,5,116,0,0,305,306,5,111,
		0,0,306,42,1,0,0,0,307,308,5,114,0,0,308,309,5,101,0,0,309,310,5,116,0,
		0,310,311,5,117,0,0,311,312,5,114,0,0,312,313,5,110,0,0,313,44,1,0,0,0,
		314,315,5,105,0,0,315,316,5,109,0,0,316,317,5,112,0,0,317,318,5,111,0,
		0,318,319,5,114,0,0,319,320,5,116,0,0,320,46,1,0,0,0,321,322,5,97,0,0,
		322,323,5,115,0,0,323,324,5,115,0,0,324,325,5,101,0,0,325,326,5,114,0,
		0,326,327,5,116,0,0,327,48,1,0,0,0,328,329,5,105,0,0,329,330,5,102,0,0,
		330,50,1,0,0,0,331,332,5,101,0,0,332,333,5,108,0,0,333,334,5,115,0,0,334,
		335,5,101,0,0,335,52,1,0,0,0,336,337,5,110,0,0,337,338,5,117,0,0,338,339,
		5,108,0,0,339,340,5,108,0,0,340,54,1,0,0,0,341,342,5,108,0,0,342,343,5,
		101,0,0,343,344,5,116,0,0,344,56,1,0,0,0,345,346,5,103,0,0,346,347,5,101,
		0,0,347,348,5,116,0,0,348,58,1,0,0,0,349,350,5,115,0,0,350,351,5,101,0,
		0,351,352,5,116,0,0,352,60,1,0,0,0,353,354,5,97,0,0,354,355,5,115,0,0,
		355,62,1,0,0,0,356,357,5,102,0,0,357,358,5,111,0,0,358,359,5,114,0,0,359,
		64,1,0,0,0,360,361,5,105,0,0,361,362,5,110,0,0,362,66,1,0,0,0,363,364,
		5,119,0,0,364,365,5,104,0,0,365,366,5,105,0,0,366,367,5,108,0,0,367,368,
		5,101,0,0,368,68,1,0,0,0,369,370,5,98,0,0,370,371,5,114,0,0,371,372,5,
		101,0,0,372,373,5,97,0,0,373,374,5,107,0,0,374,70,1,0,0,0,375,376,5,99,
		0,0,376,377,5,111,0,0,377,378,5,110,0,0,378,379,5,116,0,0,379,380,5,105,
		0,0,380,381,5,110,0,0,381,382,5,117,0,0,382,383,5,101,0,0,383,72,1,0,0,
		0,384,385,5,119,0,0,385,386,5,104,0,0,386,387,5,101,0,0,387,388,5,114,
		0,0,388,389,5,101,0,0,389,74,1,0,0,0,390,391,5,101,0,0,391,392,5,97,0,
		0,392,393,5,99,0,0,393,394,5,104,0,0,394,76,1,0,0,0,395,396,5,58,0,0,396,
		78,1,0,0,0,397,398,5,44,0,0,398,80,1,0,0,0,399,400,5,46,0,0,400,82,1,0,
		0,0,401,402,5,59,0,0,402,84,1,0,0,0,403,404,5,45,0,0,404,405,5,62,0,0,
		405,86,1,0,0,0,406,407,5,61,0,0,407,408,5,62,0,0,408,88,1,0,0,0,409,410,
		5,61,0,0,410,90,1,0,0,0,411,412,5,58,0,0,412,413,5,61,0,0,413,92,1,0,0,
		0,414,415,5,123,0,0,415,94,1,0,0,0,416,417,5,125,0,0,417,96,1,0,0,0,418,
		419,5,40,0,0,419,98,1,0,0,0,420,421,5,41,0,0,421,100,1,0,0,0,422,423,5,
		91,0,0,423,102,1,0,0,0,424,425,5,93,0,0,425,104,1,0,0,0,426,427,5,43,0,
		0,427,106,1,0,0,0,428,429,5,45,0,0,429,108,1,0,0,0,430,431,5,42,0,0,431,
		110,1,0,0,0,432,433,5,47,0,0,433,112,1,0,0,0,434,435,5,37,0,0,435,114,
		1,0,0,0,436,437,5,94,0,0,437,116,1,0,0,0,438,439,5,33,0,0,439,118,1,0,
		0,0,440,441,5,126,0,0,441,120,1,0,0,0,442,443,5,63,0,0,443,122,1,0,0,0,
		444,445,5,60,0,0,445,124,1,0,0,0,446,447,5,60,0,0,447,448,5,61,0,0,448,
		126,1,0,0,0,449,450,5,62,0,0,450,128,1,0,0,0,451,452,5,62,0,0,452,453,
		5,61,0,0,453,130,1,0,0,0,454,455,5,61,0,0,455,456,5,61,0,0,456,132,1,0,
		0,0,457,458,5,33,0,0,458,459,5,61,0,0,459,134,1,0,0,0,460,461,5,38,0,0,
		461,136,1,0,0,0,462,463,5,124,0,0,463,138,1,0,0,0,464,465,5,38,0,0,465,
		466,5,38,0,0,466,140,1,0,0,0,467,468,5,124,0,0,468,469,5,124,0,0,469,142,
		1,0,0,0,470,474,7,0,0,0,471,473,7,1,0,0,472,471,1,0,0,0,473,476,1,0,0,
		0,474,472,1,0,0,0,474,475,1,0,0,0,475,144,1,0,0,0,476,474,1,0,0,0,477,
		479,7,2,0,0,478,477,1,0,0,0,479,480,1,0,0,0,480,478,1,0,0,0,480,481,1,
		0,0,0,481,488,1,0,0,0,482,484,5,46,0,0,483,485,7,2,0,0,484,483,1,0,0,0,
		485,486,1,0,0,0,486,484,1,0,0,0,486,487,1,0,0,0,487,489,1,0,0,0,488,482,
		1,0,0,0,488,489,1,0,0,0,489,501,1,0,0,0,490,492,7,3,0,0,491,493,7,4,0,
		0,492,491,1,0,0,0,492,493,1,0,0,0,493,495,1,0,0,0,494,496,7,2,0,0,495,
		494,1,0,0,0,496,497,1,0,0,0,497,495,1,0,0,0,497,498,1,0,0,0,498,500,1,
		0,0,0,499,490,1,0,0,0,499,500,1,0,0,0,500,502,1,0,0,0,501,499,1,0,0,0,
		501,502,1,0,0,0,502,146,1,0,0,0,503,509,5,34,0,0,504,508,8,5,0,0,505,506,
		5,92,0,0,506,508,9,0,0,0,507,504,1,0,0,0,507,505,1,0,0,0,508,511,1,0,0,
		0,509,507,1,0,0,0,509,510,1,0,0,0,510,512,1,0,0,0,511,509,1,0,0,0,512,
		513,5,34,0,0,513,148,1,0,0,0,514,518,5,35,0,0,515,517,8,6,0,0,516,515,
		1,0,0,0,517,520,1,0,0,0,518,516,1,0,0,0,518,519,1,0,0,0,519,521,1,0,0,
		0,520,518,1,0,0,0,521,522,6,74,0,0,522,150,1,0,0,0,523,524,5,47,0,0,524,
		525,5,42,0,0,525,529,1,0,0,0,526,528,9,0,0,0,527,526,1,0,0,0,528,531,1,
		0,0,0,529,530,1,0,0,0,529,527,1,0,0,0,530,532,1,0,0,0,531,529,1,0,0,0,
		532,533,5,42,0,0,533,534,5,47,0,0,534,535,1,0,0,0,535,536,6,75,0,0,536,
		152,1,0,0,0,537,539,7,7,0,0,538,537,1,0,0,0,539,540,1,0,0,0,540,538,1,
		0,0,0,540,541,1,0,0,0,541,542,1,0,0,0,542,543,6,76,0,0,543,154,1,0,0,0,
		14,0,474,480,486,488,492,497,499,501,507,509,518,529,540,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
